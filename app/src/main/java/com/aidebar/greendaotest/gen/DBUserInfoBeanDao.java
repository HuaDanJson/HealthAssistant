package com.aidebar.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.demo.bs.demoapp2.DBBean.DBUserInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBUSER_INFO_BEAN".
*/
public class DBUserInfoBeanDao extends AbstractDao<DBUserInfoBean, Long> {

    public static final String TABLENAME = "DBUSER_INFO_BEAN";

    /**
     * Properties of entity DBUserInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "DBUserInfoBean");
        public final static Property NianLing = new Property(2, String.class, "nianLing", false, "NIAN_LING");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property ShenGao = new Property(4, String.class, "shenGao", false, "SHEN_GAO");
        public final static Property TiZhong = new Property(5, String.class, "tiZhong", false, "TI_ZHONG");
        public final static Property ShouSuoYa = new Property(6, String.class, "shouSuoYa", false, "SHOU_SUO_YA");
        public final static Property ShuZhangYa = new Property(7, String.class, "shuZhangYa", false, "SHU_ZHANG_YA");
        public final static Property KongFuXueTang = new Property(8, String.class, "kongFuXueTang", false, "KONG_FU_XUE_TANG");
        public final static Property FanHouXueTang = new Property(9, String.class, "FanHouXueTang", false, "FAN_HOU_XUE_TANG");
        public final static Property GuoMinYaoWu = new Property(10, String.class, "guoMinYaoWu", false, "GUO_MIN_YAO_WU");
        public final static Property LiShiJiBing = new Property(11, String.class, "liShiJiBing", false, "LI_SHI_JI_BING");
    }


    public DBUserInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBUserInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBUSER_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: userId
                "\"DBUserInfoBean\" TEXT," + // 1: name
                "\"NIAN_LING\" TEXT," + // 2: nianLing
                "\"SEX\" TEXT," + // 3: sex
                "\"SHEN_GAO\" TEXT," + // 4: shenGao
                "\"TI_ZHONG\" TEXT," + // 5: tiZhong
                "\"SHOU_SUO_YA\" TEXT," + // 6: shouSuoYa
                "\"SHU_ZHANG_YA\" TEXT," + // 7: shuZhangYa
                "\"KONG_FU_XUE_TANG\" TEXT," + // 8: kongFuXueTang
                "\"FAN_HOU_XUE_TANG\" TEXT," + // 9: FanHouXueTang
                "\"GUO_MIN_YAO_WU\" TEXT," + // 10: guoMinYaoWu
                "\"LI_SHI_JI_BING\" TEXT);"); // 11: liShiJiBing
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBUSER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBUserInfoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nianLing = entity.getNianLing();
        if (nianLing != null) {
            stmt.bindString(3, nianLing);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String shenGao = entity.getShenGao();
        if (shenGao != null) {
            stmt.bindString(5, shenGao);
        }
 
        String tiZhong = entity.getTiZhong();
        if (tiZhong != null) {
            stmt.bindString(6, tiZhong);
        }
 
        String shouSuoYa = entity.getShouSuoYa();
        if (shouSuoYa != null) {
            stmt.bindString(7, shouSuoYa);
        }
 
        String shuZhangYa = entity.getShuZhangYa();
        if (shuZhangYa != null) {
            stmt.bindString(8, shuZhangYa);
        }
 
        String kongFuXueTang = entity.getKongFuXueTang();
        if (kongFuXueTang != null) {
            stmt.bindString(9, kongFuXueTang);
        }
 
        String FanHouXueTang = entity.getFanHouXueTang();
        if (FanHouXueTang != null) {
            stmt.bindString(10, FanHouXueTang);
        }
 
        String guoMinYaoWu = entity.getGuoMinYaoWu();
        if (guoMinYaoWu != null) {
            stmt.bindString(11, guoMinYaoWu);
        }
 
        String liShiJiBing = entity.getLiShiJiBing();
        if (liShiJiBing != null) {
            stmt.bindString(12, liShiJiBing);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBUserInfoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nianLing = entity.getNianLing();
        if (nianLing != null) {
            stmt.bindString(3, nianLing);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String shenGao = entity.getShenGao();
        if (shenGao != null) {
            stmt.bindString(5, shenGao);
        }
 
        String tiZhong = entity.getTiZhong();
        if (tiZhong != null) {
            stmt.bindString(6, tiZhong);
        }
 
        String shouSuoYa = entity.getShouSuoYa();
        if (shouSuoYa != null) {
            stmt.bindString(7, shouSuoYa);
        }
 
        String shuZhangYa = entity.getShuZhangYa();
        if (shuZhangYa != null) {
            stmt.bindString(8, shuZhangYa);
        }
 
        String kongFuXueTang = entity.getKongFuXueTang();
        if (kongFuXueTang != null) {
            stmt.bindString(9, kongFuXueTang);
        }
 
        String FanHouXueTang = entity.getFanHouXueTang();
        if (FanHouXueTang != null) {
            stmt.bindString(10, FanHouXueTang);
        }
 
        String guoMinYaoWu = entity.getGuoMinYaoWu();
        if (guoMinYaoWu != null) {
            stmt.bindString(11, guoMinYaoWu);
        }
 
        String liShiJiBing = entity.getLiShiJiBing();
        if (liShiJiBing != null) {
            stmt.bindString(12, liShiJiBing);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DBUserInfoBean readEntity(Cursor cursor, int offset) {
        DBUserInfoBean entity = new DBUserInfoBean( //
            cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nianLing
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shenGao
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tiZhong
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shouSuoYa
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shuZhangYa
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // kongFuXueTang
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FanHouXueTang
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // guoMinYaoWu
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // liShiJiBing
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBUserInfoBean entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNianLing(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShenGao(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTiZhong(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShouSuoYa(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShuZhangYa(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKongFuXueTang(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFanHouXueTang(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGuoMinYaoWu(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLiShiJiBing(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBUserInfoBean entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBUserInfoBean entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBUserInfoBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
